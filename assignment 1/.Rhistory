data_clean$Temperature <- as.numeric(data_clean$Temperature)
data_clean$CO.GT. <- gsub(",", ".", data_clean$CO.GT.)
data_clean$CO.GT. <- as.numeric(data_clean$CO.GT.)
data_clean$C6H6.GT. <- gsub(",", ".", data_clean$C6H6.GT.)
data_clean$C6H6.GT. <- as.numeric(data_clean$C6H6.GT.)
data_clean$RH <- gsub(",", ".", data_clean$RH)
data_clean$RH <- as.numeric(data_clean$RH)
data_clean$AH <- gsub(",", ".", data_clean$AH)
data_clean$AH <- as.numeric(data_clean$AH)
str(data_clean)
# Statistical exploration of the data
# install.packages("psych")
# install.packages("skimr")
# install.packages("xtable")
library(psych)
library(skimr)
library(xtable)
describe(data_clean)
skim(data_clean)
plot(data_clean$Temperature, data_clean$NOx.GT.,
main = 'Temperature vs NOx.GT.',
xlab = 'Temperature (°C)',
ylab = 'NOx(GT) (ppb)',
col = 'black',
pch = 19,
cex = 5)
plot(data_clean$Temperature, data_clean$PT08.S1.CO.,
main = 'Temperature vs PT08.S1(CO)',
xlab = 'Temperature (°C)',
ylab = 'hourly averaged sensor response',
col = 'black',
pch = 19,
cex = 5)
hist(data_clean$Temperature,
main='Temperature (°C)',
xlab="(°C)",
col="pink",
border="red")
hist(data_clean$PT08.S3.NOx.,
xlim = c(-10, 50),  # Arbitrary range that may not fit the data
main = "Histogram with Inappropriate Range",
xlab = "PT08.S3(NOx) hourly averaged sensor response",
col = "pink",
border = "red")
hist(data_clean$PT08.S3.NOx.,
breaks = 1,  # Too few bins
main = "PT08.S3(NOx) with Large Bins",
xlab = "",
ylab = "",
col = "pink",
border = "red")
boxplot(data_clean$Temperature,
main="Temperature",
col="gray")
boxplot(data_clean$PT08.S3.NOx.,
main="PT08.S3(NOx)",
col="gray",
outline = FALSE)
### Problem 3. Good Data Visualization
## Bad plot rappresentation
data_clean <- data[!apply(data == -200, 1, any), ]
# data_clean <- data_clean[data_clean$Temperature != -200, ]
data_clean$Temperature
data_clean
# data_clean <- data_clean[data_clean$Temperature != -200, ]
data_clean$Temperature
plot(data_clean$Temperature, data_clean$NOx.GT.,
main = 'Temperature vs NOx.GT.',
xlab = 'Temperature (°C)',
ylab = 'NOx(GT) (ppb)',
col = 'black',
pch = 19)
library(dplyr)
# Filtra le righe dove nessuna colonna ha il valore -200
data <- data %>%
filter_all(all_vars(. != -200))
### Problem 1. Summary Statistics Table
# upload dataset
data <- read.csv("~/Documents/UiO/STK-IN4300 - Statistical Learning/assigment 1/air+quality/AirQualityUCI.csv", sep=";")
data <- data[, !names(data) %in% c("X", "X.1", 'Date', 'Time')]
data
na_count <- sapply(data, function(x) sum(is.na(x)))
na_count_df <- data.frame(Column = names(na_count), NA_Count = na_count)
ggplot(na_count_df, aes(x = Column, y = NA_Count)) +
geom_bar(stat = "identity") +
labs(title = "NA's per col", x = "Feature", y = "NA's") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
data_clean <- na.omit(data)
colSums(is.na(data_clean))
str(data_clean)# we need to transform data to perform a graphical rappresentation
data_clean$Temperature <- gsub(",", ".", data_clean$Temperature)
data_clean$Temperature <- as.numeric(data_clean$Temperature)
data_clean$CO.GT. <- gsub(",", ".", data_clean$CO.GT.)
data_clean$CO.GT. <- as.numeric(data_clean$CO.GT.)
data_clean$C6H6.GT. <- gsub(",", ".", data_clean$C6H6.GT.)
data_clean$C6H6.GT. <- as.numeric(data_clean$C6H6.GT.)
data_clean$RH <- gsub(",", ".", data_clean$RH)
data_clean$RH <- as.numeric(data_clean$RH)
data_clean$AH <- gsub(",", ".", data_clean$AH)
data_clean$AH <- as.numeric(data_clean$AH)
str(data_clean)
library(dplyr)
# Filtra le righe dove nessuna colonna ha il valore -200
data_clean <- data %>%
filter_all(all_vars(. != -200))
data_clean
# data_clean <- data_clean[data_clean$Temperature != -200, ]
data_clean$Temperature
# Filtra le righe dove nessuna colonna ha il valore -200
data_clean <- data[!apply(data, 1, function(row) any(row == -200)), ]
data_clean
# data_clean <- data_clean[data_clean$Temperature != -200, ]
data_clean$Temperature
### Problem 1. Summary Statistics Table
# upload dataset
data <- read.csv("~/Documents/UiO/STK-IN4300 - Statistical Learning/assigment 1/air+quality/AirQualityUCI.csv", sep=";")
data <- data[, !names(data) %in% c("X", "X.1", 'Date', 'Time')]
data
# install.packages("data.table")
library(data.table)
setnames(data, "T", "Temperature")
head(data)
dim(data)
summary(data)
str(data)
# check the NA's values
colSums(is.na(data)) # we have values to handle
# install.packages("ggplot2")
library(ggplot2)
na_count <- sapply(data, function(x) sum(is.na(x)))
na_count_df <- data.frame(Column = names(na_count), NA_Count = na_count)
ggplot(na_count_df, aes(x = Column, y = NA_Count)) +
geom_bar(stat = "identity") +
labs(title = "NA's per col", x = "Feature", y = "NA's") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
data_clean <- na.omit(data)
colSums(is.na(data_clean))
str(data_clean)# we need to transform data to perform a graphical rappresentation
data_clean$Temperature <- gsub(",", ".", data_clean$Temperature)
data_clean$Temperature <- as.numeric(data_clean$Temperature)
data_clean$CO.GT. <- gsub(",", ".", data_clean$CO.GT.)
data_clean$CO.GT. <- as.numeric(data_clean$CO.GT.)
data_clean$C6H6.GT. <- gsub(",", ".", data_clean$C6H6.GT.)
data_clean$C6H6.GT. <- as.numeric(data_clean$C6H6.GT.)
data_clean$RH <- gsub(",", ".", data_clean$RH)
data_clean$RH <- as.numeric(data_clean$RH)
data_clean$AH <- gsub(",", ".", data_clean$AH)
data_clean$AH <- as.numeric(data_clean$AH)
str(data_clean)
# Statistical exploration of the data
# install.packages("psych")
# install.packages("skimr")
# install.packages("xtable")
library(psych)
### Problem 3. Good Data Visualization
## Bad plot rappresentation
data[data == -200] <- NA
data_clean <- na.omit(data)
data_clean
# data_clean <- data_clean[data_clean$Temperature != -200, ]
data_clean$Temperature
plot(data_clean$Temperature, data_clean$NOx.GT.,
main = 'Temperature vs NOx.GT.',
xlab = 'Temperature (°C)',
ylab = 'NOx(GT) (ppb)',
col = 'black',
pch = 19)
data_clean$NOx.GT.
plot(data_clean$Temperature, data_clean$NOx.GT.,
main = 'Temperature vs NOx.GT.',
xlab = 'Temperature (°C)',
ylab = 'NOx(GT) (ppb)',
col = 'black',
pch = 19)
sum(is.na(data_clean$Temperature))
sum(is.na(data_clean$NOx.GT.))
data_clean.summary
data_clean(summary)
summary(data_clean)
data_clean$Temperature <- gsub(",", ".", data_clean$Temperature)
data_clean$Temperature <- as.numeric(data_clean$Temperature)
data_clean$CO.GT. <- gsub(",", ".", data_clean$CO.GT.)
data_clean$CO.GT. <- as.numeric(data_clean$CO.GT.)
data_clean$C6H6.GT. <- gsub(",", ".", data_clean$C6H6.GT.)
data_clean$C6H6.GT. <- as.numeric(data_clean$C6H6.GT.)
data_clean$RH <- gsub(",", ".", data_clean$RH)
data_clean$RH <- as.numeric(data_clean$RH)
data_clean$AH <- gsub(",", ".", data_clean$AH)
data_clean$AH <- as.numeric(data_clean$AH)
str(data_clean)
plot(data_clean$Temperature, data_clean$NOx.GT.,
main = 'Temperature vs NOx.GT.',
xlab = 'Temperature (°C)',
ylab = 'NOx(GT) (ppb)',
col = 'black',
pch = 19)
plot(data_clean$Temperature, data_clean$PT08.S1.CO.,
main = 'Temperature vs PT08.S1(CO)',
xlab = 'Temperature (°C)',
ylab = 'hourly averaged sensor response',
col = 'black',
pch = 19)
hist(data_clean$Temperature,
main='Temperature (°C)',
xlab="(°C)",
col="gray",
border="black")
hist(data_clean$PT08.S3.NOx.,
main="PT08.S3(NOx)",
xlab="PT08.S3(NOx) hourly averaged sensor response",
col="gray",
border="black")
boxplot(data_clean$Temperature,
main="Temperature",
xlab="Temperature (°C)",
col="gray",
horizontal = TRUE)
boxplot(data_clean$PT08.S3.NOx.,
main="PT08.S3(NOx)",
xlab="PT08.S3(NOx) hourly averaged sensor response",
col="gray",
horizontal = TRUE)
hist(data_clean$CO.GT.,
main="PT08.S3(NOx)",
xlab="PT08.S3(NOx) hourly averaged sensor response",
col="gray",
border="black")
set.seed(15555029)
index <- sample(seq_len(nrow(data_clean)), size = 0.8 * nrow(data_clean))
trainData <- data_clean[index, ]
testData <- data_clean[-index, ]
y_train <- trainData$CO.GT.
X_train <- trainData[, !names(trainData) %in% c("CO.GT.")]
y_test <- testData$CO.GT.
X_test <- testData[, !names(testData) %in% c("CO.GT.")]
data.train <- as.data.frame(cbind(y_train, X_train))
colnames(data.train)[1] <- 'y'
# train the model
model <- lm(y ~ ., data = data.train)
summary(model)
predictions <- predict(model, newdata = X_test)
# MSE
rmse <- sqrt(mean((predictions - y_test)^2))
print(paste("RMSE:", rmse))
# Plotting the results
plot(y_test, predictions, main = "Previsioni vs Valori Reali",
xlab = "Valori Reali", ylab = "Previsioni", pch = 19, col = "black")
abline(a = 0, b = 1, col = "red")
library(MASS)
full.model <- lm(y ~ ., data = data.train)
null.model <- lm(y ~ 1, data = data.train)
mod.stepwise <- stepAIC(full.model, scope = list(lower = null.model, upper = full.model))
summary(mod.stepwise)
# now we try to use other methods to perform this regression problem
# Ridge
library(glmnet)
X_train_matrix <- as.matrix(X_train)
lambda.cv <- cv.glmnet(x = X_train_matrix, y = y_train, family = 'gaussian', alpha = 0)$lambda.min
mod.ridge <- glmnet(y = y_train, x = X_train_matrix, lambda = lambda.cv, family = 'gaussian', alpha = 0)
mod.ridge
# Lasso
cross.validation.result <- cv.glmnet(x = X_train_matrix, y = y_train, family = 'gaussian', alpha = 1)
lambda.cv <- cross.validation.result$lambda.min
mod.lasso <- glmnet(y = y_train, x = X_train_matrix, lambda = lambda.cv, family = 'gaussian', alpha = 1)
mod.lasso
# Caricare i pacchetti necessari
library(stargazer)
# 2. Creare oggetti lm fittizi per Stargazer
# Estrarre i coefficienti dal modello Ridge
coef_ridge <- as.numeric(coef(mod.ridge))
names(coef_ridge) <- rownames(coef(mod.ridge))
# Creare un oggetto lm fittizio per Ridge
fake_ridge <- lm(y_train ~ X_train_matrix - 1)
fake_ridge$coefficients <- coef_ridge
# Estrarre i coefficienti dal modello Lasso
coef_lasso <- as.numeric(coef(mod.lasso))
names(coef_lasso) <- rownames(coef(mod.lasso))
# Creare un oggetto lm fittizio per Lasso
fake_lasso <- lm(y_train ~ X_train_matrix - 1)
fake_lasso$coefficients <- coef_lasso
# 3. Riassumere gli output con stargazer
stargazer(model, fake_ridge, fake_lasso, type = "text",
title = "Ridge and Lasso Regression Results",
column.labels = c("OLS","Ridge", "Lasso"),
covariate.labels = names(coef_ridge),
omit.stat = c("f", "ser"))
### Problem 1. Summary Statistics Table
# upload dataset
# ----
data <- read.csv("~/Documents/UiO/STK-IN4300 - Statistical Learning/assigment 1/air+quality/AirQualityUCI.csv", sep=";")
### Problem 1. Summary Statistics Table
# upload dataset
# ----
data <- read.csv("~/Documents/UiO/STK-IN4300 - Statistical Learning/assigment 1/air+quality/AirQualityUCI.csv", sep=";")
str(data_clean)
data
### Problem 1. Summary Statistics Table
# upload dataset
# ----
data <- read.csv("~/Documents/UiO/STK-IN4300 - Statistical Learning/assigment 1/air+quality/AirQualityUCI.csv", sep=";")
data <- data[, !names(data) %in% c("X", "X.1", 'Date', 'Time')]
data
# install.packages("data.table")
library(data.table)
setnames(data, "T", "Temperature")
head(data)
dim(data)
summary(data)
summary(data)
summary(data)
str(data)
# check the NA's values
colSums(is.na(data)) # we have values to handle
# install.packages("ggplot2")
library(ggplot2)
na_count <- sapply(data, function(x) sum(is.na(x)))
na_count_df <- data.frame(Column = names(na_count), NA_Count = na_count)
ggplot(na_count_df, aes(x = Column, y = NA_Count)) +
geom_bar(stat = "identity") +
labs(title = "NA's per col", x = "Feature", y = "NA's") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
data_clean <- na.omit(data)
colSums(is.na(data_clean))
summary(data)
str(data_clean)# we need to transform data to perform a graphical rappresentation
data_clean$Temperature <- gsub(",", ".", data_clean$Temperature)
data_clean$Temperature <- as.numeric(data_clean$Temperature)
data_clean$CO.GT. <- gsub(",", ".", data_clean$CO.GT.)
data_clean$CO.GT. <- as.numeric(data_clean$CO.GT.)
data_clean$C6H6.GT. <- gsub(",", ".", data_clean$C6H6.GT.)
data_clean$C6H6.GT. <- as.numeric(data_clean$C6H6.GT.)
data_clean$RH <- gsub(",", ".", data_clean$RH)
data_clean$RH <- as.numeric(data_clean$RH)
data_clean$AH <- gsub(",", ".", data_clean$AH)
data_clean$AH <- as.numeric(data_clean$AH)
summary(data)
summary(data_clean)
str(data_clean)
# ----
# Statistical exploration of the data
# install.packages("psych")
# install.packages("skimr")
# install.packages("xtable")
library(psych)
library(skimr)
library(xtable)
describe(data_clean)
skim(data_clean)
plot(data_clean$Temperature, data_clean$NOx.GT.,
main = 'Temperature vs NOx.GT.',
xlab = 'Temperature (°C)',
ylab = 'NOx(GT) (ppb)',
col = 'black',
pch = 19,
cex = 5)
plot(data_clean$Temperature, data_clean$PT08.S1.CO.,
main = 'Temperature vs PT08.S1(CO)',
xlab = 'Temperature (°C)',
ylab = 'hourly averaged sensor response',
col = 'black',
pch = 19,
cex = 5)
hist(data_clean$Temperature,
main='Temperature (°C)',
xlab="(°C)",
col="pink",
border="red")
hist(data_clean$PT08.S3.NOx.,
xlim = c(-10, 50),  # Arbitrary range that may not fit the data
main = "Histogram with Inappropriate Range",
xlab = "PT08.S3(NOx) hourly averaged sensor response",
col = "pink",
border = "red")
hist(data_clean$PT08.S3.NOx.,
breaks = 1,  # Too few bins
main = "PT08.S3(NOx) with Large Bins",
xlab = "",
ylab = "",
col = "pink",
border = "red")
boxplot(data_clean$Temperature,
main="Temperature",
col="gray")
boxplot(data_clean$PT08.S3.NOx.,
main="PT08.S3(NOx)",
col="gray",
outline = FALSE)
# ----
### Problem 3. Good Data Visualization
## Bad plot rappresentation
data[data == -200] <- NA
data_clean <- na.omit(data)
data_clean
# data_clean <- data_clean[data_clean$Temperature != -200, ]
data_clean$Temperature
summary(data_clean)
data_clean$Temperature <- gsub(",", ".", data_clean$Temperature)
data_clean$Temperature <- as.numeric(data_clean$Temperature)
data_clean$CO.GT. <- gsub(",", ".", data_clean$CO.GT.)
data_clean$CO.GT. <- as.numeric(data_clean$CO.GT.)
data_clean$C6H6.GT. <- gsub(",", ".", data_clean$C6H6.GT.)
data_clean$C6H6.GT. <- as.numeric(data_clean$C6H6.GT.)
data_clean$RH <- gsub(",", ".", data_clean$RH)
data_clean$RH <- as.numeric(data_clean$RH)
data_clean$AH <- gsub(",", ".", data_clean$AH)
data_clean$AH <- as.numeric(data_clean$AH)
str(data_clean)
describe(data_clean)
skim(data_clean)
# ----
plot(data_clean$Temperature, data_clean$NOx.GT.,
main = 'Temperature vs NOx.GT.',
xlab = 'Temperature (°C)',
ylab = 'NOx(GT) (ppb)',
col = 'black',
pch = 19)
plot(data_clean$Temperature, data_clean$PT08.S1.CO.,
main = 'Temperature vs PT08.S1(CO)',
xlab = 'Temperature (°C)',
ylab = 'hourly averaged sensor response',
col = 'black',
pch = 19)
hist(data_clean$Temperature,
main='Temperature (°C)',
xlab="(°C)",
col="gray",
border="black")
hist(data_clean$PT08.S3.NOx.,
main="PT08.S3(NOx)",
xlab="PT08.S3(NOx) hourly averaged sensor response",
col="gray",
border="black")
boxplot(data_clean$Temperature,
main="Temperature",
xlab="Temperature (°C)",
col="gray",
horizontal = TRUE)
boxplot(data_clean$PT08.S3.NOx.,
main="PT08.S3(NOx)",
xlab="PT08.S3(NOx) hourly averaged sensor response",
col="gray",
horizontal = TRUE)
hist(data_clean$CO.GT.,
main="PT08.S3(NOx)",
xlab="PT08.S3(NOx) hourly averaged sensor response",
col="gray",
border="black")
### Problem 4: Simple analysis
# ----
set.seed(15555029)
index <- sample(seq_len(nrow(data_clean)), size = 0.8 * nrow(data_clean))
trainData <- data_clean[index, ]
testData <- data_clean[-index, ]
y_train <- trainData$CO.GT.
X_train <- trainData[, !names(trainData) %in% c("CO.GT.")]
y_test <- testData$CO.GT.
X_test <- testData[, !names(testData) %in% c("CO.GT.")]
data.train <- as.data.frame(cbind(y_train, X_train))
colnames(data.train)[1] <- 'y'
# ----
# train the model
model <- lm(y ~ ., data = data.train)
summary(model)
predictions <- predict(model, newdata = X_test)
# MSE
rmse <- sqrt(mean((predictions - y_test)^2))
print(paste("RMSE:", rmse))
# Plotting the results
plot(y_test, predictions, main = "Previsioni vs Valori Reali",
xlab = "Valori Reali", ylab = "Previsioni", pch = 19, col = "black")
abline(a = 0, b = 1, col = "red")
library(MASS)
full.model <- lm(y ~ ., data = data.train)
null.model <- lm(y ~ 1, data = data.train)
mod.stepwise <- stepAIC(full.model, scope = list(lower = null.model, upper = full.model))
summary(mod.stepwise)
# Ridge
library(glmnet)
X_train_matrix <- as.matrix(X_train)
lambda.cv <- cv.glmnet(x = X_train_matrix, y = y_train, family = 'gaussian', alpha = 0)$lambda.min
mod.ridge <- glmnet(y = y_train, x = X_train_matrix, lambda = lambda.cv, family = 'gaussian', alpha = 0)
mod.ridge
summary(mod.ridge)
mod.ridge
# ----
# Lasso
cross.validation.result <- cv.glmnet(x = X_train_matrix, y = y_train, family = 'gaussian', alpha = 1)
lambda.cv <- cross.validation.result$lambda.min
mod.lasso <- glmnet(y = y_train, x = X_train_matrix, lambda = lambda.cv, family = 'gaussian', alpha = 1)
mod.lasso
# 2. Creare oggetti lm fittizi per Stargazer
# Estrarre i coefficienti dal modello Ridge
coef_ridge <- as.numeric(coef(mod.ridge))
names(coef_ridge) <- rownames(coef(mod.ridge))
# Creare un oggetto lm fittizio per Ridge
fake_ridge <- lm(y_train ~ X_train_matrix - 1)
fake_ridge$coefficients <- coef_ridge
# Estrarre i coefficienti dal modello Lasso
coef_lasso <- as.numeric(coef(mod.lasso))
names(coef_lasso) <- rownames(coef(mod.lasso))
# Creare un oggetto lm fittizio per Lasso
fake_lasso <- lm(y_train ~ X_train_matrix - 1)
fake_lasso$coefficients <- coef_lasso
# 3. Riassumere gli output con stargazer
stargazer(model, fake_ridge, fake_lasso, type = "text",
title = "Ridge and Lasso Regression Results",
column.labels = c("OLS","Ridge", "Lasso"),
covariate.labels = names(coef_ridge),
omit.stat = c("f", "ser"))
summary(data_clean)
str(data_clean)
str(data)
